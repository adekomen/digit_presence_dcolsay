import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
//import 'package:digit_presence/widgets/qr_scanner.dart';

// G√©n√©rer le mock pour http.Client
@GenerateMocks([http.Client])
import 'qr_scanner_test.mocks.dart'; // Import du fichier auto-g√©n√©r√©

void main() {
  late MockClient client;

  setUp(() {
    client = MockClient();
  });

test('Envoi du QR code √† /api/registers et v√©rification de la r√©ponse', () async {
  // Donn√©es de test
  final qrData = {"qrCode": "testCode"};

  // V√©rification avant la simulation
  print("‚ö° Mocking client.post...");
  when(client.post(
    any,
    headers: anyNamed('headers'),
    body: anyNamed('body'),
  )).thenAnswer((_) async {
    print("‚úÖ Mock client.post() appel√© !");
    return http.Response(jsonEncode({"message": "Succ√®s"}), 200);
  });

  // Ex√©cution de la requ√™te
  print("üöÄ Envoi de la requ√™te...");
  final response = await client.post(
    Uri.parse('http://localhost:8000/api/registers'),
    headers: {"Content-Type": "application/json"},
    body: jsonEncode(qrData),
  );

  // V√©rification que la requ√™te a bien √©t√© appel√©e
  verify(client.post(
    any,
    headers: anyNamed('headers'),
    body: anyNamed('body'),
  )).called(1);

  // V√©rification du statut et du contenu de la r√©ponse
  expect(response.statusCode, 200);
  expect(jsonDecode(response.body)['message'], "Succ√®s");
});

}
